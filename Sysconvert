//进制转换
convert_base.cpp
#include <stack>
#include <cstdio>
/**
* @brief 进制转换，将一个 10 进制整数转化为 d 进制，d<=16.
* @param[in] n 整数 n
* @param[in] d d 进制
* @return 无
*/
void convert_base(int n, const int d) {
stack<int> s;
int e;
while(n != 0) {
e = n % d;
s.push(e);
n /= d;
}
while(!s.empty()) {
e = s.top();
s.pop();
printf("%X", e);
}
return;
}
const int MAXN = 64; // 栈的最大长度
4.1
栈
17
int stack[MAXN];
int top = -1;
/**
* @brief 进制转换，将一个 10 进制整数转化为 d 进制，d<=16，更优化的版本.
*
* 如果可以预估栈的最大空间，则用数组来模拟栈，这时常用的一个技巧。
* 这里，栈的最大长度是多少？假设 CPU 是 64 位，最大的整数则是 2^64，由于
* 数制最小为 2，在这个进制下，数的位数最长，这就是栈的最大长度，最长为 64。
*
* @param[in] n 整数 n
* @param[in] d d 进制
* @return 无
*/
void convert_base2(int n, const int d) {
int e;
while(n != 0) {
e = n % d;
stack[++top] = e; // push
n /= d;
}
while(top >= 0) {
e = stack[top--]; // pop
printf("%X", e);
}
return;
}
/**
* @brief 进制转换，将一个 d 进制整数转化为 10 进制，d<=16.
* @param[in] s d 进制整数
* @param[in] d d 进制
* @return 10 进制整数
*/
int restore(const char s[MAXN], const int d) {
int result = 0;
int one;
for (int i = 0; s[i] != '\0'; i++) {
if (s[i] >= '0' && s[i] <= '9') one = s[i] - '0';
else if (s[i] >= 'A' && s[i] <= 'F') one = s[i] - 'A' + 10;
else one = s[i] - 'a' + 10; /* (s[i] >= 'a' && s[i] <= 'f') */
result = result * d + one;
}
return result;
}
//通用版本
void sysconverted(int num,int n)
{
  if(n<10)
  { if(num<n)
      cout<<n;
    else
    { 
      sysconvert(num/n,n)
      cout<<num%n;
    }
  }
  else
  {
    if(num<n)
      fun_3(num);
    else
    {
      sysconvert(num/n,n);
      fun_3(num%n);
    }
  }
}
//十进制数转换成二进制数字
 void fun_1(int n)
 {
    if(n<2)   
        cout<<n;
    if(n>=2)  
    {
      fun_1(n/2);
      cout<<n%2;
    }
 }
  
//十进制数字转换成八进制数字
 void fun_2(int n)
 {
   if(n<8)   
       cout<<n;
   if(n>=8)  
   {
     fun_2(n/8);
     cout<<n%8;
   }
 }
  
//十进制数转换成十六进制数字
 void fun_3(int n)
 {
   switch(n)
   {
      case 10:   cout<<"A"; break;
      case 11:   cout<<"B"; break;
      case 12:   cout<<"C"; break;
      case 13:   cout<<"D"; break;
      case 14:   cout<<"E"; break;
      case 15:   cout<<"F"; break;
      default:   cout<<n;   
   }
 }     
  
void fun_4(int n)
 {
    if(n<16)   
        fun_3(n);
    if(n>=16)  
    {
      fun_4(n/16);
      fun_3(n%16);
    }
 }
  
//主函数
 void main()
 { 
    int n;
     cout<<"请输入n的值:  "<<endl;
     cin>>n;
     cout<<"十进制数字转换成二进制，八进制，十六进制数字结果如下："<<endl;
     fun_1(n);        
     cout<<endl;      //输出结果换行
     fun_2(n);        
     cout<<endl;      
     fun_4(n);       
    cout<<endl;    
}
